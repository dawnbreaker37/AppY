@model Chat
@{
    ViewData["Title"] = "Chat";

    User? UserInfo = ViewBag.UserInfo;
    User? SecondUserInfo = ViewBag.SecondUserInfo;
    Chat? ChatInfo = ViewBag.ChatInfo;
    List<IGrouping<DateTime, DiscussionMessage>>? ChatMessages = ViewBag.Messages;
    DiscussionMessage? FirstPinnedMessage = ViewBag.FirstPinnedMessageInfo;
    bool IsMuted = ViewBag.IsMuted;
}

<div class="main-sidebar" id="Main_SideBar">
    <div class="d-none">
        <input type="hidden" id="SentMessagesCount_Val" value="@ViewBag.MessagesCount" />
        <input type="hidden" id="CurrentChatId_Val" value="@ChatInfo.Id" />
        <input type="hidden" id="IsChatLocked_Val" value="@ViewBag.IsChatLocked" />
        <form method="get" asp-controller="Chat" asp-action="CheckShortnameAvailability" id="ChatShortnameAvailabilityCheck_Form">
            <input type="hidden" name="Id" value="@ChatInfo.Id" />
            <input type="hidden" name="Value" id="CSA_Value_Val" />
        </form>
        <form method="get" asp-controller="ChatMessage" asp-action="GetMessageInfo" id="GetChatMessageInfo_Form">
            <input type="hidden" name="Id" id="CGMI_Id_Val" value="0" />
            <input type="hidden" name="UserId" value="@UserInfo.Id" />
        </form>
        <form method="get" asp-controller="ChatMessage" asp-action="IsMessagePinned" id="IsChatMessagePinned_Form">
            <input type="hidden" name="Id" id="IMP_Id_Val" value="0" />
        </form>
        <form method="post" asp-controller="Chat" asp-action="Mute" id="MuteTheChat_Form">
            <input type="hidden" name="Id" value="@ChatInfo.Id" />
            <input type="hidden" name="UserId" value="@UserInfo.Id" />
        </form>
        <form method="post" asp-controller="Chat" asp-action="Unmute" id="UnmuteTheChat_Form">
            <input type="hidden" name="Id" value="@ChatInfo.Id" />
            <input type="hidden" name="UserId" value="@UserInfo.Id" />
        </form>
    </div>

    <div class="smallside-box-container shadow-standard" id="Discussions_Container">
        <div class="header-container p-2 pb-0 text-center" id="Discussions_Container-Header">
            <button type="button" class="btn btn-close btn-smallside-close btn-sm rounded-circle float-end ms-1" aria-label="close" id="Discussions_Container-Close"></button>
            <span class="h5 text-truncate p-1" id="Discussions_Container_Header">Discussions</span>
            <div></div>
            <small class="card-text text-muted" id="DiscussionsCount_Lbl"><span id="DiscussionsCount_Span">0</span> discussion(s)</small>
        </div>
        <div class="box-container p-2 pt-1 mt-1" id="Discussions_Container-Box">
        </div>
    </div>
    <div class="smallside-box-container shadow-standard" id="Chats_Container">
        <div class="header-container p-2 pb-0 text-center" id="Chats_Container-Header">
            <button type="button" class="btn btn-close btn-smallside-close btn-sm rounded-circle float-end ms-1" aria-label="close" id="Chats_Container-Close"></button>
            <span class="h5 text-truncate p-1" id="Chats_Container_Header">Chats</span>
            <div></div>
            <small class="card-text text-muted" id="ChatsCount_Lbl"><span id="ChatsCount_Span">0</span> chat(s)</small>
        </div>
        <div class="box-container p-2 pt-1 mt-1" id="Chats_Container-Box">
        </div>

        <div class="box-container p-2 pt-1 w-100" id="MessageForwarding_Box" style="display: none;">
            <div class="box-container bg-light">
                <div class="w-100 p-2">
                    <div class="other-user-reply-container mb-1">
                        <small class="card-text fw-500"> <i class="fa-solid fa-reply"></i> Replied to</small>
                        <p class="card-text white-space-on message-label" id="ForwardingMsgText_Lbl">Forwarding Message...</p>
                    </div>
                    <p class="card-text white-space-on message-label" id="ForwardingMsgCaption_Lbl" style="display: none;">Additional Caption</p>
                </div>
            </div>
            <div class="ms-1">
                <small class="card-text text-muted">choose any chat from list to forward</small>
            </div>
        </div>
        <div class="box-container bottom-0 p-2">
            <div class="d-none">
                <input type="hidden" name="FromChatId" id="Forward_FromChatId_Val" value="@ChatInfo.Id" />
                <input type="hidden" name="ToChatId" id="Forward_ToChatId_Val" value="0" />
            </div>
            <div class="hstack gap-3">
                <button type="button" class="btn btn-standard btn-sm" disabled> <i class="fa-solid fa-align-left"></i> </button>
                <textarea class="form-control rounded-pill shadow-none" placeholder="Add a caption here..." rows="1" maxlength="3400" name="Caption" id="Forward_Caption_Val"></textarea>
                <button type="submit" class="btn btn-standard-asset btn-primary btn-sm rounded-pill" id="ForwardAMessageSbmt_Btn" disabled>Forward</button>
            </div>
        </div>
    </div>

    <div class="smallside-box-container shadow-standard overflow-hidden" id="DeleteChat_Container">
        <div class="header-container p-2 text-center" id="DeleteChat_Container-Header">
            <button type="button" class="btn btn-close btn-smallside-close btn-sm rounded-circle float-end ms-1" aria-label="close" id="DeleteChat_Container-Close"></button>
            <span class="h5 text-truncate" id="ClearHistory_Container-Header">Delete Chat</span>
        </div>
        <div class="box-container p-2 pt-1 mt-1" id="DeleteChat_Container-Box">
            <div class="box-container text-center">
                <h2 class="h2 text-danger"> <i class="fa-solid fa-triangle-exclamation"></i> </h2>
                <h4 class="h4">Are You Sure to Delete This Chat?</h4>
                <small class="card-text text-muted">Deleting this chat you'll lose all information in it. Please, read all the following items before making a decision about this chat</small>
                <div class="border-top mt-2 pt-2 text-start border-bottom pb-2">
                    <ul>
                        <li class="card-text text-muted"><small>You and your conversable'll lose all information of this chat (including images and chat link)</small></li>
                        <li class="card-text text-muted"><small>This chat with his own link will become unavailable</small></li>
                        <li class="card-text text-muted"><small>Reserved shortname of this chat will become free for other users to use</small></li>
                        <li class="card-text text-muted"><small>This chat will disappear from your active chat lists (and will fully disappear even from inactivated chat lists after 5 days)</small></li>
                        <li class="card-text text-muted"><small>Chat will remain available for restoring for next <span class="fw-500">5 days</span>. If you or your interlocutor do not restore the chat within 5 days, then it'll completely disappear from chat list, without any possibility of restoration</small></li>
                    </ul>
                </div>
                <div class="box-container mt-3">
                    <div class="row">
                        <div class="col">
                            <form method="post" asp-controller="Chat" asp-action="Delete" id="DeleteChat_Form">
                                <div class="d-none">
                                    <input type="hidden" name="Id" id="DCF_Id_Val" value="@ChatInfo.Id" />
                                    <input type="hidden" name="UserId" id="DCF_UserId_Val" value="@UserInfo.Id" />
                                </div>
                                <button type="submit" class="btn btn-danger btn-standard-asset w-100">Delete</button>
                            </form>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-standard-asset w-100 btn-light" onclick="closeSidebar();">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="smallside-box-container shadow-standard overflow-hidden" id="ClearHistory_Container">
        <div class="header-container p-2 text-center" id="ClearHistory_Container-Header">
            <button type="button" class="btn btn-close btn-smallside-close btn-sm rounded-circle float-end ms-1" aria-label="close" id="ClearHistory_Container-Close"></button>
            <span class="h5 text-truncate" id="ClearHistory_Container-Header">Clear Chat History</span>
        </div>
        <div class="box-container p-2 pt-1 mt-1" id="ClearHistory_Container-Box">
            <div class="box-container text-center">
                <h2 class="h2"> <i class="fa-solid fa-broom"></i> </h2>
                <h4 class="h4">Are You Sure to Clean History?</h4>
                <small class="card-text text-muted">If you're sure to clean the history of this chat tap on <span class="text-danger fw-500">Clear</span> button. All messages, including images and other files will be deleted from this chat and cannot be restored lately</small>
                <div class="box-container mt-3">
                    <div class="row">
                        <div class="col">
                            <form method="post" asp-controller="Chat" asp-action="ClearHistory" id="ClearChatHistory_Form">
                                <div class="d-none">
                                    <input type="hidden" name="Id" id="CCH_Id_Val" value="@ChatInfo.Id" />
                                    <input type="hidden" name="UserId" id="CCH_UserId_Val" value="@UserInfo.Id" />
                                </div>
                                <button type="submit" class="btn btn-danger btn-standard-asset w-100">Clear</button>
                            </form>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-standard-asset w-100 btn-light" onclick="closeSidebar();">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="smallside-bot-navbar shadow-standard" style="display: none; bottom: -300px;" id="SmallsideBotNavbar">
        <div class="box-container p-2">
            <div class="row">
                <div class="col">
                    <div>
                        <form method="get" asp-controller="Chat" asp-action="GetChats" id="GetChats_Form">
                            <button type="submit" class="btn btn-standard btn-sm w-100"> <i class="fa-regular fa-comments"></i> <br />Chats</button>
                        </form>
                    </div>
                </div>
                <div class="col">
                    <div>
                        <form method="get" asp-controller="Discussion" asp-action="GetDiscussions" id="GetDiscussions_Form">
                            <button type="submit" class="btn btn-standard btn-sm w-100"> <i class="fa-solid fa-quote-right"></i> <br />Discussions</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="main-container mh-max shadow-standard" id="Preloaded_Container">
    <div class="box-container p-2" style="display: none; margin-left: -1200px;" id="Preloaded_Container_ShowBox">
        <button type="button" class="btn btn-light btn-standard-asset btn-sm float-start me-1 discussion-header-return" id="Preloaded_Container_ShowBox-Return">Back</button>
        <button type="button" class="btn btn-standard-asset btn-sm float-end ms-1 btn-light" id="EditChatInfo_Box-Trigger" data-bs-toggle="collapse" data-bs-target="#EditChatInfo_Box" aria-expanded="false" aria-controls="EditChatInfo_Box">Edit</button>
        <div class="box-container text-center">
            <div class="image-picture-none-container text-center bg-light mx-auto" id="UnpicturedAvatar_Box">
                <div class="unpictured-container-label" id="UnpicturedAvatar_Lbl">@ChatInfo.Name![0]</div>
            </div>
            <span class="h3 text-truncate" id="ChatName_Span">@ChatInfo.Name</span>
            <div></div>
            <small class="card-text text-muted">@UserInfo.PseudoName, @SecondUserInfo.PseudoName</small>
        </div>
        <div class="box-container mt-4">
            <div class="row">
                <div class="col">
                    @if(!IsMuted)
                    {
                        <button type="button" class="btn btn-standard-asset btn-light mute-the-chat w-100" id="@ChatInfo.Id-ChatMuteOrUnmute"> <i class="fa-regular fa-bell-slash text-primary"></i> <br />Mute</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-standard-asset btn-light unmute-the-chat w-100" id="@ChatInfo.Id-ChatMuteOrUnmute"> <i class="fa-regular fa-bell text-primary"></i> <br />Unmute</button>
                    }
                </div>
                <div class="col">
                    <button type="button" class="btn btn-standard-asset btn-light btn-slide-to-right w-100" id="SecurityInfo_Box-Open"> <i class="fa-solid fa-fingerprint text-primary"></i> <br />Security</button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-standard-asset btn-light w-100"> <i class="fa-solid fa-palette text-primary"></i> <br />Appearance</button>
                </div>
                <div class="col">
                    <div class="dropstart">
                        <button class="btn btn-standard-asset btn-light w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false"> <i class="fa-solid fa-ellipsis text-primary"></i> <br />More </button>
                        <ul class="dropdown-menu shadow-sm p-1">
                            <li><a asp-controller="User" asp-action="Page" asp-route-Id="@SecondUserInfo.Id" class="dropdown-item"> <i class="fa-solid fa-up-right-from-square"></i> @SecondUserInfo.PseudoName's Page</a></li>
                            <li><button type="button" class="dropdown-item mt-1 btn-smallside-open-container" id="ClearHistory_Container-Open"> <i class="fa-solid fa-broom"></i> Clear History</button></li>
                            <li><button type="button" class="dropdown-item text-danger mt-1 btn-smallside-open-container" id="BlockUser_Container-Open"> <i class="fa-solid fa-ban"></i> Block @SecondUserInfo.PseudoName</button></li>
                            <li><button type="button" class="dropdown-item text-danger mt-1 btn-smallside-open-container" id="DeleteChat_Container-Open"> <i class="fa-solid fa-trash-can"></i> Delete</button></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-container mt-1" id="MembersInfo_Box">
            <div class="box-container bg-light p-2">
                <span class="h6">You</span>
                <div></div>
                <small class="card-text text-muted">@@@UserInfo.ShortName</small>
            </div>
            <div class="box-container bg-light p-2 mt-1">
                <a asp-controller="User" asp-action="Page" asp-route-Id="@SecondUserInfo.Id" class="h6 text-dark text-decoration-none user-via-shortname">@SecondUserInfo.PseudoName</a>
                <div></div>
                <small class="card-text text-muted">@@@SecondUserInfo.ShortName</small>
            </div>
        </div>
        <div class="box-container mt-2" id="SecurityInfo_Box" style="margin-left: -1200px; display: none;">
            <button type="button" class="btn btn-standard-asset btn-light btn-sm btn-slide-to-left" id="SecurityInfo_Box-Close">Close</button>
            <div class="btn-group-vertical w-100 mt-1" role="group" aria-label="vertical btn-group">
                @if(!ChatInfo.UnablePreview)
                {
                    <div class="w-100">
                        <form method="post" asp-controller="Chat" asp-action="SwitchPreviewOption" id="SwitchChatPreviewingOption_Form">
                            <input type="hidden" name="Value" id="SPO_Value_Val" value="false" />
                            <input type="hidden" name="Id" value="@ChatInfo.Id" />
                            <button type="submit" class="btn btn-group-member w-100 btn-top-rounded" id="SwitchChatPreviewOption_Btn"> <i class="fa-regular fa-window-maximize"></i> Chat Previewing <span class="text-primary style-font" id="ChatPreviewing_Span"> ∙ On</span></button>
                        </form>
                    </div>
                }
                else
                {
                    <div class="w-100">
                        <form method="post" asp-controller="Chat" asp-action="SwitchPreviewOption" id="SwitchChatPreviewingOption_Form">
                            <input type="hidden" name="Value" id="SPO_Value_Val" value="true" />
                            <input type="hidden" name="Id" value="@ChatInfo.Id" />
                            <button type="submit" class="btn btn-group-member btn-top-rounded w-100" id="SwitchChatPreviewOption_Btn"> <i class="fa-regular fa-window-maximize"></i> Chat Previewing <span class="text-muted style-font" id="ChatPreviewing_Span"> ∙ Off</span></button>
                        </form>
                    </div>
                }
                @if(ChatInfo.ForbidMessageForwarding)
                {
                    <div class="w-100">
                        <form method="post" asp-controller="Chat" asp-action="SwitchForwardingSettings" id="SwitchForwardingSettings">
                            <input type="hidden" name="Value" id="SFS_Value_Val" value="true" />
                            <input type="hidden" name="Id" value="@ChatInfo.Id" />
                            <button type="submit" class="btn btn-group-member btn-top-rounded w-100" id="SwitchForwardingSettingsSbmt_Btn"> <i class="fa-solid fa-share"></i> Forwarding Messages to This Chat <span class="text-muted style-font" id="ForwardingSettings_Span"> ∙ Off</span></button>
                        </form>
                    </div>
                }
                else
                {
                    <div class="w-100">
                        <form method="post" asp-controller="Chat" asp-action="SwitchForwardingSettings" id="SwitchForwardingSettings">
                            <input type="hidden" name="Value" id="SFS_Value_Val" value="false" />
                            <input type="hidden" name="Id" value="@ChatInfo.Id" />
                            <button type="submit" class="btn btn-group-member btn-top-rounded w-100" id="SwitchForwardingSettingsSbmt_Btn"> <i class="fa-solid fa-share"></i> Forwarding Messages to This Chat <span class="text-primary style-font" id="ForwardingSettings_Span"> ∙ On</span></button>
                        </form>
                    </div>
                }
                <div class="w-100">
                    <form method="post" asp-controller="Chat" asp-action="SwitchAutoDestructionOption" id="SwitchAutoDesctructionOption_Form">
                        <input type="hidden" name="Value" id="SADO_Value_Val" value="false" />
                        <input type="hidden" name="Id" value="@ChatInfo.Id" />
                        <button type="submit" class="btn btn-group-member border-radius-sharp w-100" id="SwitchAutoDestructionOptionSbmt_Btn" disabled> <i class="fa-solid fa-eraser"></i> Messages Auto-Destruction <span class="text-muted style-font" id="SADO_Span"> ∙ Off</span></button>
                    </form>
                </div>
                <button type="button" class="btn btn-group-member btn-bottom-rounded w-100" data-bs-toggle="collapse" data-bs-target="#SetChatPassword_Collapse" aria-expanded="false" aria-controls="SetChatPassword_Collapse"> <i class="fa-solid fa-key"></i> Password Settings</button>
            </div>
        </div>
        <div class="collapse" id="SetChatPassword_Collapse">
            <div class="bordered-container p-2 mt-2">
                <div class="box-container bg-light p-2 text-center">
                    <h3 class="h3 text-primary"> <i class="fa-solid fa-key fa-flip" style="--fa-animation-duration: 1.2s;"></i> </h3>
                    <h5 class="h5">Password Settings</h5>
                    <small class="card-text text-muted">Set or remove your password for this chat</small>
                </div>
                <div class="box-container mt-2 text-center">
                    @if (ViewBag.PasswordSettings != null)
                    {
                        <div class="box-container bg-light p-1 text-center">
                            <form method="post" asp-controller="Chat" asp-action="SetPassword" id="SetPassword_Form">
                                <input type="hidden" name="Id" value="@ChatInfo.Id" />
                                <input type="password" class="message-form-control natural-form-control w-100 text-center" name="Password" id="SetPassword_Password_Val" placeholder="You've got a password for this chat" data-bs-html="You've got a password for this chat" maxlength="16" disabled />
                            </form>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                <form method="post" asp-controller="Chat" asp-action="RemovePassword" id="RemovePassword_Form">
                                    <input type="hidden" name="Id" value="@ChatInfo.Id" />
                                    <button type="submit" class="btn btn-standard-asset btn-light text-danger w-100" id="RemovePasswordSbmt_Btn">Remove</button>
                                </form>
                                <small class="card-text text-muted">Removes the password</small>
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-standard-asset btn-primary btn-form-awakening w-100" id="SetPassword_Password_Val-Activate" data-bs-html="Enter new password here">Set New</button>
                                <small class="card-text text-muted">Tap to set a new one</small>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="box-container bg-light p-1 text-center">
                            <form method="post" asp-controller="Chat" asp-action="SetPassword" id="SetPassword_Form">
                                <input type="hidden" name="Id" value="@ChatInfo.Id" />
                                <input type="password" class="message-form-control natural-form-control w-100 text-center" name="Password" id="SetPassword_Password_Val" placeholder="You haven't got any password for this chat" data-bs-html="You haven't got any password for this chat" maxlength="16" disabled />
                            </form>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                <form method="post" asp-controller="Chat" asp-action="RemovePassword" id="RemovePassword_Form">
                                    <input type="hidden" name="Id" value="@ChatInfo.Id" />
                                    <button type="submit" class="btn btn-standard-asset btn-light text-danger w-100" id="RemovePasswordSbmt_Btn" disabled>Remove</button>
                                </form>
                                <small class="card-text text-muted">Completely removes the password</small>
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-standard-asset btn-primary btn-form-awakening w-100" id="SetPassword_Password_Val-Activate" data-bs-html="Enter new password here">Set New</button>
                                <small class="card-text text-muted">Tap to set a new one</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="collapse" id="EditChatInfo_Box">
            <div class="bordered-container p-2 mt-2">
                <h6 class="h6">Edit Chat Info</h6>
                <div class="box-container mt-3">
                    <form method="post" asp-controller="Chat" asp-action="Edit" id="EditChat_Form">
                        <div class="d-none">
                            <input type="hidden" name="Id" id="ChatEdit_Id_Val" value="@ChatInfo.Id" />
                        </div>
                        <div class="form-floating">
                            <input asp-for="Name" class="form-control" placeholder="Enter chat's name here" value="@ChatInfo.Name" />
                            <label class="form-label fw-500" asp-for="Name">Chat Name</label>
                        </div>
                        <div class="ms-1">
                            <small class="card-text text-muted">Chats with empty names automatically get 'New Chat' title</small>
                        </div>
                        <div class="form-floating mt-2">
                            <textarea name="Description" class="form-control" id="ChatDescription_Val" placeholder="Enter chat's description here" maxlength="600">@ChatInfo.Description</textarea>
                            <label class="form-label fw-500" asp-for="Description">Description</label>
                        </div>
                        <div class="form-floating mt-2">
                            <input asp-for="Shortname" id="ChatShortname_Val" class="form-control strong-input" placeholder="Create a shorname for your chat" maxlength="24" value="@ChatInfo.Shortname" />
                            <label class="form-label fw-500" asp-for="Shortname">@@Shortname</label>
                        </div>
                        <div class="ms-1">
                            <small class="card-text text-muted" id="ShortnameDescription_Lbl">Shortname must be unique. May container up to 24 characters with these criteries: [A-Z, a-z], [0-9] and underscore</small>
                        </div>
                        <div class="box-container mt-3">
                            <button type="submit" class="btn btn-standard text-primary w-100" id="EditChatSbmt_Btn">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="header-container special-container-header bg-light p-2" id="Preloaded_Container-Header">
        <span class="h5 text-truncate p-1 discussion-header w-75" id="Preloaded_Container_ShowBox-Open">@ChatInfo.Name</span>
        <div></div>
        <small class="card-text text-muted ms-1 btn-set-status" id="ChatStatusBar_Lbl"><span class="status-slider" id="StatusBar_Lbl-0">@SecondUserInfo.LastSeenText</span><span class="status-slider" id="StatusBar_Lbl-1" style="display: none;">chat with @SecondUserInfo.PseudoName</span><span class="status-slider" id="StatusBar_Lbl-2" style="display: none;">tap to edit settings</span></small>
        @if(FirstPinnedMessage != null)
        {
            <div class="box-container ps-1 pe-1 mt-1" id="PinnedMessages_Box">
                <div class="float-end ms-1">
                    <form method="get" asp-controller="ChatMessage" asp-action="GetPinnedMessageInfo" id="GetChatPinnedMessageInfo_Form">
                        <input type="hidden" name="Id" value="@ChatInfo.Id" />
                        <input type="hidden" name="SkipCount" id="GCPMI_SkipCount_Val" value="1" />
                        <button type="submit" class="btn btn-standard btn-sm">Next <i class="fa-solid fa-angle-right"></i> </button>
                    </form>
                </div>
                <small class="card-text fw-500 pt-1"> <i class="fa-solid fa-thumbtack fa-rotate-by text-primary me-1" style="--fa-rotate-angle: 45deg;"></i> Pinned Message, <span id="PinnedMessagesCurrentNumber_Span">1</span> of <span id="PinnedMessagesCount_Span">@ViewBag.PinnedMessagesCount</span></small>
                <div class="box-container" id="CurrentPinnedMessageInfo_Box">
                    <small class="card-text text-muted text-truncate message-label discussion-alternative-options" id="CurrentPinnedMessagesText_Lbl" data-bs-msg-id="@FirstPinnedMessage.Id">@FirstPinnedMessage.Text</small>
                </div>
            </div>
        }
        else
        {
            <div class="box-container ps-1 pe-1 mt-1" id="PinnedMessages_Box" style="display: none;">
                <div class="float-end ms-1">
                    <form method="get" asp-controller="ChatMessage" asp-action="GetPinnedMessageInfo" id="GetPinnedMessageInfo_Form">
                        <input type="hidden" name="Id" value="@ChatInfo.Id" />
                        <input type="hidden" name="SkipCount" id="GCPMI_SkipCount_Val" value="1" />
                        <button type="submit" class="btn btn-standard btn-sm">Next <i class="fa-solid fa-angle-right"></i> </button>
                    </form>
                </div>
                <small class="card-text fw-500 pt-1"> <i class="fa-solid fa-thumbtack fa-rotate-by text-primary me-1" style="--fa-rotate-angle: 45deg;"></i> Pinned Message, <span id="PinnedMessagesCurrentNumber_Span">1</span> of <span id="PinnedMessagesCount_Span">@ViewBag.PinnedMessagesCount</span></small>
                <div class="box-container" id="CurrentPinnedMessageInfo_Box">
                    <small class="card-text text-muted text-truncate message-label discussion-alternative-options" id="CurrentPinnedMessagesText_Lbl">No Currently Pinned Message</small>
                </div>
            </div>
        }
    </div>
    <div class="box-container p-2 pt-1 mt-1 discussion-box" id="Prealoded_Container-Box">
        <div class="box-container" id="Messages_Box">
            @if (ViewBag.MessagesCount == 0)
            {
                <div class="box-container p-3 pt-4 pb-4 bg-light mt-2 mb-2 text-center mx-auto my-auto" id="NoSentMessages_Box">
                    <h1 class="h1"> <i class="fa-regular fa-comments text-primary"></i> </h1>
                    <h3 class="h3 style-font">No Sent Messages</h3>
                    <small class="card-text text-muted">send your first message in this chat</small>
                </div>
                <div class="box-container" id="HaveSentMessage_Box" style="display: none;">
                </div>
            }
            else
            {
                <div class="box-container p-3 pt-4 pb-4 bg-light mt-2 mb-2 text-center mx-auto my-auto" id="NoSentMessages_Box" style="display: none;">
                    <h1 class="h1"> <i class="fa-regular fa-comments text-primary"></i> </h1>
                    <h3 class="h3 style-font">No Sent Messages</h3>
                    <small class="card-text text-muted">send your first message in this chat</small>
                </div>
                <div class="box-container" id="HaveSentMessage_Box">
                    @foreach(var Key in ChatMessages)
                    {
                        <div class="grouping-box mx-auto text-center">
                            <small class="card-text text-muted">@Key.Key.ToString("d/MM, dddd")</small>
                        </div>
                        @foreach(DiscussionMessage message in Key)
                        {
                            @if(message.UserId == UserInfo.Id)
                            {
                                <div class="message-box" id="@message.Id-ChatMsgBox">
                                    <div class="cur-user-msg-box" id="@message.Id-ChatMsgNmBox">
                                        <div class="cur-user-styled-msg-box p-2" id="@message.Id-ChatMsgStyledBox">
                                            @if (message.IsAutoDeletable > 0)
                                            {
                                                <small class="card-text"> <i class="fa-solid fa-clock-rotate-left"></i> @message.IsAutoDeletable mins</small>
                                            }
                                            @if (message.MainImgUrl != null)
                                            {
                                                <div></div>
                                                <button type="button" class="btn btn-link btn-sm btn-get-message-image" id="@message.Id-GetChatInitialMsg_Btn">@message.ImagesCount Images in Stack <i class="fa-solid fa-angle-right"></i> </button>
                                                <div class="box-container mt-1 mb-1">
                                                    <img class="msg-img-container" id="@message.Id-ChatMsg_Img" src="~/ChatMessageImages/@message.MainImgUrl" alt="Cannot display this message" />
                                                </div>
                                            }
                                            @if (message.RepliedMessageId != 0)
                                            {
                                                <div class="cur-user-reply-container mb-1 reply-element" id="@message.Id-RepliedMsgBox" data-bs-msg-id="@message.Id">
                                                    <small class="card-text fw-500 reply-element" id="@message.RepliedMessageId-RepliedMsgIcon" data-bs-msg-id="@message.Id"> <i class="fa-solid fa-reply"></i> Replied to</small>
                                                    <p class="card-text white-space-on message-label chat-options reply-element" id="@message.RepliedMessageId-RepliedMsgText" data-bs-msg-id="@message.Id">@message.RepliesMsgShortText</p>
                                                </div>
                                            }
                                            <p class="card-text white-space-on message-label chat-options" id="@message.Id-ChatOptionMsgText_Lbl">@message.Text</p>
                                        </div>
                                        <div class="float-end me-1" id="@message.Id-ChatMsgStatsBox">
                                            @if (message.IsChecked)
                                            {
                                                <small class="card-text msg-checked-icon" id="@message.Id-ChatMsgIsChecked_Lbl"> <i class="fa-solid fa-check-double text-primary"></i> </small>
                                            }
                                            else
                                            {
                                                <small class="card-text msg-checked-icon" id="@message.Id-ChatMsgIsChecked_Lbl" data-bs-msg-id="@message.Id"> <i class="fa-solid fa-check text-muted"></i> </small>
                                            }
                                            <input type="hidden" id="@message.Id-ChatMsgFullDate_Val" value="@message.SentAt.ToString("dd/MM, HH:mm")" />
                                            <small class="card-text text-muted">@message.SentAt.ToShortTimeString()</small>
                                            @if (message.IsEdited)
                                            {
                                                <small class="card-text text-muted" id="@message.Id-ChatMsgIsEdited_Lbl">edited</small>
                                            }
                                            else
                                            {
                                                <small class="card-text text-muted" style="display: none;" id="@message.Id-ChatMsgIsEdited_Lbl">edited</small>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="message-box" id="@message.Id-ChatMsgBox">
                                    <div class="other-user-msg-box">
                                        <div class="other-user-styled-msg-box p-2" id="@message.Id-ReplyToChatMessageViaDiscussionMessage">
                                            @if (message.IsAutoDeletable > 0)
                                            {
                                                <small class="card-text"> <i class="fa-solid fa-clock-rotate-left"></i> @message.IsAutoDeletable mins</small>
                                            }
                                            @if (message.MainImgUrl != null)
                                            {
                                                <div></div>
                                                <button type="button" class="btn btn-link-opp btn-get-message-image btn-sm" id="@message.Id-GetChatnitialMsg_Btn">@message.ImagesCount Images in Stack <i class="fa-solid fa-angle-right"></i> </button>
                                                <div class="box-container mt-1 mb-1">
                                                    <img class="msg-img-container" src="~/ChatMessageImages/@message.MainImgUrl" id="@message.Id-ChatMsg_Img" alt="Cannot display this message" />
                                                </div>
                                            }
                                            @if (message.RepliedMessageId != 0)
                                            {
                                                <div class="other-user-reply-container mb-1 reply-element" id="@message.Id-RepliedMsgBox" data-bs-msg-id="@message.Id">
                                                    <small class="card-text fw-500 reply-element" id="@message.Id-RepliedMsgIcon" data-bs-msg-id="@message.Id"> <i class="fa-solid fa-reply"></i> Replied to</small>
                                                    <p class="card-text reply-to-chat-message message-label white-space-on reply-element" id="@message.Id-RepliedMsgText" data-bs-msg-id="@message.Id">@message.RepliesMsgShortText</p>
                                                </div>
                                            }
                                            <p class="card-text white-space-on message-label reply-to-chat-message chat-options" id="@message.Id-ChatOptionMsgText_Lbl">@message.Text</p>
                                        </div>
                                        <div class="ms-1">
                                            <input type="hidden" id="@message.Id-ChatMsgFullDate_Val" value="@message.SentAt.ToString("dd/MM, HH:mm")" />
                                            <small class="card-text text-muted">@message.SentAt.ToShortTimeString()</small>
                                            @if (message.IsEdited)
                                            {
                                                <small class="card-text text-muted" id="@message-IsChatMsgEdited_Lbl">edited</small>
                                            }
                                            else
                                            {
                                                <small class="card-text text-muted" id="@message-IsChatMsgEdited_Lbl" style="display: none;"></small>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    } 
                </div>
            }
        </div>

        <div class="messages-container bg-light box-container overflow-hidden p-2 shadow-sm" style="display: none; margin-bottom: -1200px;" id="MainTextEditor_Box">
            <div class="box-container">
                <div class="box-container d-inline-block w-100">
                    <button type="button" class="btn btn-sm btn-standard text-editor me-1 mt-1 fw-bold" id="0-TextEditorStyle" data-bs-paste-to="SendMessage_Text_Val"> B </button>
                    <button type="button" class="btn btn-sm btn-standard text-editor me-1 mt-1 fst-italic" id="1-TextEditorStyle" data-bs-paste-to="SendMessage_Text_Val"> It </button>
                    <button type="button" class="btn btn-sm btn-standard text-editor me-1 mt-1 text-decoration-underline" id="2-TextEditorStyle" data-bs-paste-to="SendMessage_Text_Val"> U </button>
                    <button type="button" class="btn btn-sm btn-standard text-editor me-1 mt-1 style-font" id="3-TextEditorStyle" data-bs-paste-to="SendMessage_Text_Val"> AF </button>
                    <button type="button" class="btn btn-sm btn-standard me-1 mt-1 set-style" id="4-SetStyle"> <i class="fa-solid fa-palette set-style" id="4-SetStyleX"></i> </button>
                    <button type="button" class="btn btn-sm btn-standard me-1 mt-1 set-style" id="5-SetStyle"> <i class="fa-solid fa-link set-style" id="5-SetStyleX"></i> </button>
                    <button type="button" class="btn btn-sm btn-standard me-1 mt-1 set-style" id="6-SetStyle"> <i class="fa-regular fa-message set-style" id="6-SetStyleX"></i> </button>
                    <button type="button" class="btn btn-sm btn-standard me-1 mt-1 set-style" id="7-SetStyle"> <i class="fa-regular fa-note-sticky set-style" id="7-SetStyleX"></i> </button>
                    <button type="button" class="btn btn-sm btn-standard me-1 mt-1"> <i class="fa-regular fa-copy"></i> </button>
                </div>
                <div class="mt-2">
                    @if (UserInfo.AreMessagesAutoDeletable > 0)
                    {
                        <button class="btn btn-standard btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#AutoDeleteOptions_Collapse" aria-expanded="false" aria-controls="AutoDeleteOptions_Collapse" id="SendMessage_IsAutoDeletable-TurnOnOrOff"> <span class="text-primary" id="AreMessagesAutoDeletable-Icon"><i class="fa-solid fa-clock-rotate-left"></i></span> Auto-Deletable Messages: <span class="text-primary" id="AutoDeleteDelay-Icon">@ViewBag.AutodeleteDelayValue</span></button>
                    }
                    else
                    {
                        <button class="btn btn-standard btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#AutoDeleteOptions_Collapse" aria-expanded="false" aria-controls="AutoDeleteOptions_Collapse" id="SendMessage_IsAutoDeletable-TurnOnOrOff"> <span class="text-muted" id="AreMessagesAutoDeletable-Icon"><i class="fa-solid fa-clock-rotate-left"></i></span> Auto-Deletable Messages: <span class="text-muted" id="AutoDeleteDelay-Icon">disabled</span></button>
                    }
                    <div class="ms-1">
                        <small class="card-text text-muted">Messages auto-destruct after a set time when marked as read</small>
                    </div>
                    <div class="collapse" id="AutoDeleteOptions_Collapse">
                        <div class="box-container mt-1">
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="0-MinsSet_Btn">Turn Off</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="1-MinsSet_Btn">Immediately</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="3-MinsSet_Btn">3 minutes</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="15-MinsSet_Btn">15 minutes</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="60-MinsSet_Btn">1 hour</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="720-MinsSet_Btn">12 hours</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="1440-MinsSet_Btn">1 day</button>
                            <button type="button" class="btn btn-light bg-white btn-standard-asset btn-sm set-autodelete-duration mt-1" id="10080-MinsSet_Btn">1 week</button>
                        </div>
                    </div>
                </div>
                <div class="box-container inside-box-container mt-2 bg-white p-2" id="MessagePreview_Box" style="display: none;">
                </div>
                <div class="bordered-container inside-box-container p-2 mt-2" id="TextEditorSettings-Box" style="display: none;">
                    <div class="box-container w-auto">
                        <button type="button" class="btn btn-standard-asset bg-white btn-sm" id="AddTextToTheTextEditor_Btn"> <i class="fa-regular fa-rectangle-list"></i> Type: <span class="text-primary" id="TES_Type_Span"></span></button>
                        <div class="mt-1"></div>
                        <small class="card-text text-muted ms-1">Tap on <span class="text-primary">type</span> shower to insert sample to your message</small>
                    </div>
                    <div class="mt-2">
                        <div class="form-floating">
                            <div class="d-none">
                                <input type="hidden" id="TextType_Val" value="0" />
                                <input type="hidden" id="PasteTo_Val" value="SendMessage_Text_Val" />
                                <input type="hidden" id="WidgetId_Val" value="Preloaded_Container" />
                            </div>
                            <input type="text" id="PreparedText1_Val" autocomplete="off" class="form-control shadow-none" placeholder="Enter your text here" />
                            <label for="PreparedText1_Val" class="fw-500" id="PreparedText1_Lbl">Prepared Text, 1</label>
                        </div>
                        <div class="form-floating mt-2">
                            <input type="text" id="PreparedText2_Val" autocomplete="off" class="form-control shadow-none" placeholder="Enter your text here" />
                            <label for="PreparedText2_Val" class="fw-500" id="PreparedText2_Lbl">Prepared Text, 2</label>
                        </div>
                    </div>
                </div>
                <div class="box-container text-center mt-2">
                    <button type="button" class="btn btn-standard btn-close-inside-box btn-sm w-100" id="MainTextEditor_Box-Close"> <i class="fa-solid fa-xmark"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="messages-container bordered-container overflow-hidden p-2 shadow-sm" style="display: none; margin-bottom: -1200px; background-color: transparent;" id="ChatMessageOptions_Box">
        <div class="box-container">
            <div class="d-none">
                <input type="hidden" class="got-msg-id-value" id="CurrentGotChatMsg_Id_Val" value="0" />
                <div class="d-none" id="CurrentChatMsg_FullText_Val"></div>
            </div>
            <button type="button" class="btn btn-standard btn-sm copy-to-clipboard float-end" id="CurrentChatMsg_FullText_Val-CopyToTheClipboard"> <i class="fa-regular fa-copy text-primary"></i> Copy</button>
            <small class="card-text text-muted got-msg-datetime" id="ChatMsgOptionAdditionalInfo_Lbl">sent date, time, is checked and edited</small>
            <div class="mt-1">
                <button type="button" class="btn btn-standard-asset btn-light btn-sm delete-message-options" id="ChatMessageOptions_Box-Close"> <i class="fa-solid fa-xmark text-primary"></i> Cancel</button>
                <small class="card-text got-msg-text" id="ChatOptionMessageText_Lbl">Message Text</small>
            </div>
        </div>
        <div class="box-container mt-3">
            <div class="row">
                <div class="col" id="EditChatMsg_Col">
                    <button type="button" class="btn btn-standard btn-sm w-100" id="EditChatMessage_Btn"> <i class="fa-regular fa-pen-to-square text-primary"></i> Edit</button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-standard btn-sm w-100" id="ReplyChatMessage_Btn"> <i class="fa-solid fa-reply text-primary"></i> Reply</button>
                </div>
                <div class="col">
                    <form method="get" asp-controller="Chat" asp-action="GetChatsShortly" id="GetChatsShortly_Form">
                        <input type="hidden" name="ChatId" value="@ChatInfo.Id" />
                        <input type="hidden" name="IsForForwarding" value="true" />
                        <button type="submit" class="btn btn-standard btn-sm w-100"> <i class="fa-solid fa-share text-primary"></i> Forward</button>
                    </form>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col" id="PinTheMessage_Box">
                    <form method="post" asp-controller="ChatMessage" asp-action="Pin" id="PinTheChatMessage_Form">
                        <input type="hidden" name="Id" id="PCM_Id_Val" value="0" />
                        <input type="hidden" name="UserId" value="@UserInfo.Id" />
                        <button type="submit" class="btn btn-standard btn-sm w-100"> <i class="fa-solid fa-thumbtack text-primary"></i> Pin</button>
                    </form>
                </div>
                <div class="col" id="UnpinTheMessage_Box" style="display: none;">
                    <form method="post" asp-controller="ChatMessage" asp-action="Unpin" id="UnpinTheChatMessage_Form">
                        <input type="hidden" name="Id" id="UCM_Id_Val" value="0" />
                        <input type="hidden" name="DiscussionOrChatId" value="@ChatInfo.Id" />
                        <input type="hidden" name="UserId" value="@UserInfo.Id" />
                        <button type="submit" class="btn btn-standard btn-sm w-100"> <i class="fa-solid fa-link-slash text-primary"></i> Unpin</button>
                    </form>
                </div>
                <div class="col">
                    <form method="post" asp-controller="SavedMessage" asp-action="SaveChatMessage" id="SaveChatMessage_Form">
                        <input type="hidden" name="Id" id="STM_Id_Val" value="0" />
                        <input type="hidden" name="ChatId" id="STM_ChatId_Val" value="@ChatInfo.Id" />
                        <button type="submit" class="btn btn-standard btn-sm w-100" id="SaveTheMessageSbmt_Btn"> <i class="fa-regular fa-bookmark text-primary"></i> Save</button>
                    </form>
                </div>
                <div class="col" id="DeleteChatMsg_Col">
                    <form method="post" asp-controller="Chat" asp-action="Delete" id="DeleteChatMessage_Form">
                        <input type="hidden" name="Id" id="DDM_Id_Val" value="0" />
                        <input type="hidden" name="DiscussionId" value="@ChatInfo.Id" />
                        <button type="submit" class="btn btn-standard btn-sm text-danger w-100" id="DeleteChatMessageSbmt_Btn"> <i class="fa-regular fa-trash-can"></i> Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="fixed-bottom bot-navbar shadow-sm p-2" id="Preloaded_BotOffNavbar">
    <div class="box-container" id="SendMessage_FirstInside_Box">
        <div class="box-container">
            <div class="border-bottom pb-1" id="EditingOrReplying_Box" style="display: none;">
                <div class="box-container text-start">
                    <button type="button" class="btn btn-standard-asset text-primary float-end ms-1 btn-sm" id="CancelChatMessageSettings_Btn"> <i class="fa-solid fa-xmark"></i> </button>
                    <span class="card-text fs-6 text-primary" id="EditingOrReplyingMsgIcon_Lbl"> <i class="fa-regular fa-pen-to-square"></i> </span>
                    <span class="card-text fs-6 fw-500 text-primary" id="EditingOrReplyingMsgStatus_Lbl">Edit Message</span>
                </div>
                <div class="box-container mt-2 pb-1 text-start">
                    <small class="card-text me-auto" id="EditingOrReplyingMsgText_Lbl">Message Text...</small>
                </div>
            </div>
            <div class="d-none">
                <input type="hidden" name="CurrentChatMessageId" id="SM_CurrentChatMessageId_Val" value="@ViewBag.CurrentChatUserId" />
                <input type="hidden" name="Id" id="EM_Id_Val" value="0" />
                <input type="hidden" name="MessageId" id="RM_ReplyId_Val" value="0" />
                <input type="hidden" name="ReplyText" id="RM_ReplyText_Val" />
                <input type="hidden" name="ChatId" id="SM_ChatId_Val" value="@ChatInfo.Id" />
                <input type="hidden" name="UserId" id="SM_UserId_Val" value="@UserInfo.Id" />
                <input type="hidden" name="ReceiverId" id="SM_ReceiverId_Val" value="@ViewBag.ReceiverId" />
                <input type="hidden" id="SendMessage_IsAutoDeletable" name="IsAutoDeletable" value="@UserInfo.AreMessagesAutoDeletable" />
                <input type="file" class="send-message-files" id="SendMessage_Images_Val" name="Images" accept=".png, .jpg, .jpeg" multiple max="6" />
            </div>

            <div class="hstack gap-2" id="TextSendingBox">
                <button type="button" class="btn btn-standard btn-sm" id="ReturnMainBotNavbar_Btn"> <i class="fa-solid fa-chevron-down"></i> </button>
                <textarea name="Text" id="SendMessage_Text_Val" class="send-message-form-control message-form-control me-auto form-control-check-input w-100 overflow-hidden" rows="1" placeholder="Your message..." maxlength="3400" data-bs-min-length="1" data-bs-html="SendMessage_SbmtBtn"></textarea>
                <button type="button" class="btn btn-message-example btn-sm open-animated-collapse btn-open-inside-box" id="MainTextEditor_Box-Open"> <i class="fa-solid fa-plus btn-open-inside-box" id="MainTextEditor_Box-OpenY"></i> </button>
                <button type="button" class="btn btn-message-example btn-sm shadow-none me-1" id="SendAFileInMessage_Btn" data-bs-html="SendMessage_Images_Val"> <i class="fa-regular fa-file-image"></i> </button>
                <button type="button" class="btn btn-message-example btn-sm shadow-none me-1" id="PreviewTheMessage_Btn" style="display: none;"> <i class="fa-solid fa-align-left"></i> </button>
                <button type="submit" class="btn rounded-pill btn-sm btn-submit-msg-sending bg-primary text-light" id="SendMessage_SbmtBtn" disabled>Send</button>
            </div>

        </div>
    </div>
    <button type="button" class="btn btn-light text-primary btn-slide-to-bottom btn-slide-to-bottom-style shadow-sm" id="Preloaded_Container-SlideToBottom" style="bottom: -75px;"> <i class="fa-solid fa-angle-down btn-slide-to-bottom" id="Preloaded_Container-SlideToBottomX"></i> </button>
</div>

<div class="alert-container mx-auto shadow-sm p-3" role="alert" id="MessageAlert_Container">
    <div class="box-container">
        <button type="button" class="btn btn-standard text-primary btn-sm ms-1 float-end shadow-none btn-send-reply-via-alert" data-bs-toggle="collapse" data-bs-target="#Reply_Collapse" aria-expanded="false" aria-controls="Reply_Collapse">Reply</button>
        <h6 class="h6" id="MessageFrom_Lbl">From</h6>
        <p class="card-text" id="MessageText_Lbl">Message Content</p>
    </div>
    <div class="collapse" id="Reply_Collapse">
      <div class="box-container mt-3">
            <div class="hstack gap-3">
                <input type="hidden" id="ReplyingMsg_ChatId_Val" value="0" />
                <input type="hidden" id="ReplyingMsg_ReceiverId_Val" value="0" />
                <input type="text" id="ReplyingMsg_Message_Val" class="message-form-control shadow-none w-100" placeholder="Enter your reply here..." maxlength="3400" />
                <button type="button" class="btn btn-standard-asset btn-primary btn-sm rounded-pill" id="SendReply_FromAlert_Btn">Send</button>
            </div>
      </div>
    </div>
</div>

@if (ViewBag.PasswordSettings != null)
{
    <div class="cloud-box shadow-sm p-3" id="Password_Box">
        <div class="box-container text-center">
            <h1 class="h1 text-primary"> <i class="fa-solid fa-lock" id="Password_Box_Main_Icon"></i> </h1>
            <h4 class="h4">Chat Locked</h4>
            <small class="card-text text-muted" id="PasswordDescription_Lbl">Enter the password to continue</small>
            <div class="mt-3">
                <form method="post" asp-controller="Chat" asp-action="CheckPassword" id="CheckPassword_Form">
                    <input type="hidden" name="Id" value="@ChatInfo.Id" />
                    <input type="password" name="Password" id="CheckPassword_Val" class="message-form-control text-center w-100" placeholder="Chat Password..." maxlength="16" />
                </form>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <button type="button" class="btn btn-standard text-primary w-100" onclick="window.history.back();">Close</button>
                </div>
                <div class="col">
                    <form method="post" asp-controller="Chat" asp-action="SendChatPasswordViaEmail" id="SendChatPasswordViaEmail_Form">
                        <input type="hidden" name="Id" value="@ChatInfo.Id" />
                        <button type="submit" class="btn btn-standard text-primary w-100" id="SendChatPasswordViaEmailSbmt_Btn">Send Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>
        const hubConnection = new signalR.HubConnectionBuilder().withUrl("/chat").build();
        async function start() {
            try {
                await hubConnection.start();
            }
            catch (err) {
                console.log(err.toString());
                setTimeout(function () {
                    start();
                }, 2500);
            }
        }

    window.onblur = function() {
        const receiverId = $("#SM_ReceiverId_Val").val();
        hubConnection.invoke("ClosedTheChat", receiverId).catch(function (err) {
            console.log(err.toString());
        });
    }
    window.onfocus = function () {
        const receiverId = $("#SM_ReceiverId_Val").val();
        const chatId = parseInt($("#SM_ChatId_Val").val());
        const senderId = parseInt($("#SM_UserId_Val").val());

        hubConnection.invoke("OpenedTheChat", receiverId).catch(function (err) {
            console.log(err.toString());
        });

        hubConnection.invoke("MarkAllAsRead", chatId, senderId, receiverId).catch(function (err) {
            console.log(err.toString());
        });
    }

    hubConnection.on("MarkAllAsRead", function (chatId) {
        let currentChatId = $("#SM_ChatId_Val").val();
        if (currentChatId == chatId) {
            $(".msg-checked-icon").html(' <i class="fa-solid fa-check-double text-primary"></i> ');
        }
    });

    document.getElementById("EditChat_Form").addEventListener("submit", function (event) {
        event.preventDefault();
        const id = parseInt($("#ChatEdit_Id_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        const name = $("#Name").val();
        const description = $("#ChatDescription_Val").val();
        const shortName = $("#ChatShortname_Val").val();
        const currentChatId = parseInt($("#CurrentChatId_Val").val());

        hubConnection.invoke("EditChat", id, receiverId, name, description, shortName, currentChatId).catch(function (err) {
            console.log(err.toString());
        });
    });
    document.getElementById("ClearChatHistory_Form").addEventListener("submit", function (event) {
        event.preventDefault();
        const id = parseInt($("#CCH_Id_Val").val());
        const userId = parseInt($("#CCH_UserId_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        const currentChatId = $("#CurrentChatId_Val").val();
        hubConnection.invoke("ClearHistory", id, userId, receiverId, currentChatId).catch(function (err) {
            console.log(err.toString());
        });
    });
    document.getElementById("DeleteChat_Form").addEventListener("submit", function (event) {
        event.preventDefault();
        const id = parseInt($("#DCF_Id_Val").val());
        const userId = parseInt($("#DCF_UserId_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        const currentChatId = parseInt($("#CurrentChatId_Val").val());
        hubConnection.invoke("Delete", id, userId, receiverId, currentChatId).catch(function (err) {
            console.log(err.toString());
        });
    });

    document.getElementById("SendMessage_Text_Val").addEventListener("focusin", function () {
        const receiverId = $("#SM_ReceiverId_Val").val();
        hubConnection.invoke("Typing", receiverId).catch(function (err) {
            console.log(err.toString());
        });
    });
    document.getElementById("SendMessage_Text_Val").addEventListener("focusout", function () {
        const receiverId = $("#SM_ReceiverId_Val").val();
        hubConnection.invoke("Idling", receiverId).catch(function (err) {
            console.log(err.toString());
        });
    });

    document.getElementById("PinTheChatMessage_Form").addEventListener("submit", function () {
        event.preventDefault();
        const messageId = parseInt($("#PCM_Id_Val").val());
        const userId = parseInt($("#SM_UserId_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        const chatId = parseInt($("#SM_ChatId_Val").val());
        hubConnection.invoke("PinTheMessage", messageId, userId, receiverId, chatId).catch(function (err) {
            console.log(err.toString());
        });
    });
    document.getElementById("UnpinTheChatMessage_Form").addEventListener("submit", function () {
        event.preventDefault();
        const messageId = parseInt($("#UCM_Id_Val").val());
        const userId = parseInt($("#SM_UserId_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        const chatId = parseInt($("#SM_ChatId_Val").val());
        hubConnection.invoke("UnpinTheMessage", messageId, userId, receiverId, chatId).catch(function (err) {
            console.log(err.toString());
        });
    });

    document.getElementById("SendMessage_SbmtBtn").addEventListener("click", function () {
        const message = $("#SendMessage_Text_Val").val();
        const senderId = parseInt($("#SM_UserId_Val").val());
        const receiverId = parseInt($("#SM_ReceiverId_Val").val());
        const chatId = parseInt($("#SM_ChatId_Val").val());
        const messageId = parseInt($("#EM_Id_Val").val());
        const replyId = parseInt($("#RM_ReplyId_Val").val());
        const updatedMessage = deleteAllEndEmptyChars(message);
        const currentChatMessageId = parseInt($("#SM_CurrentChatMessageId_Val").val());

        if (messageId <= 0) {
            const isAutodeletable = parseInt($("#SendMessage_IsAutoDeletable").val());
            if (replyId <= 0) {
                const chatName = $("#ChatName_Span").html();
                hubConnection.invoke("Send", updatedMessage, senderId, receiverId, chatId, isAutodeletable, chatName, currentChatMessageId).catch(function (err) {
                    console.log(err.toString());
                });
            }
            else {
                const chatName = $("#ChatName_Span").html();
                const replyText = $("#RM_ReplyText_Val").val();
                hubConnection.invoke("Reply", replyId, replyText, senderId, chatId, updatedMessage, isAutodeletable, receiverId, currentChatMessageId, chatName).catch(function (err) {
                    console.log(err.toString());
                });
            }
        }
        else {
            hubConnection.invoke("Edit", messageId, senderId, receiverId, updatedMessage, chatId).catch(function (err) {
                console.log(err.toString());
            });
        }
        $("#SendMessage_SbmtBtn").attr("disabled", true);
        $("#SendMessage_Text_Val").val("");
    });

    document.getElementById("SendReply_FromAlert_Btn").addEventListener("click", function (event) {
        event.preventDefault();
        const message = deleteAllEndEmptyChars($("#ReplyingMsg_Message_Val").val());
        const senderId = parseInt($("#SM_UserId_Val").val());
        const receiverId = parseInt($("#ReplyingMsg_ReceiverId_Val").val());
        const chatId = parseInt($("#ReplyingMsg_ChatId_Val").val());
        const chatName = $("#ChatName_Span").html();
                const currentChatMessageId = parseInt($("#SM_CurrentChatMessageId_Val").val());

        hubConnection.invoke("SendFromAlert", message, senderId, receiverId, chatId, 0, chatName, currentChatMessageId).catch(function (err) {
            console.log(err.toString());
        });
        $("#Reply_Collapse").collapse("hide");
        $("#ReplyingMsg_Message_Val").val("");
        $("#ReplyingMsg_ChatId_Val").val(0);
        $("#ReplyingMsg_ReceiverId_Val").val(0);
        topBarClose("MessageAlert_Container");
    });

    document.getElementById("ForwardAMessageSbmt_Btn").addEventListener("click", function (event) {
        event.preventDefault();
        const toChatId = parseInt($("#Forward_ToChatId_Val").val());
        const fromChatId = parseInt($("#Forward_FromChatId_Val").val());
        const messageId = parseInt($("#CurrentGotChatMsg_Id_Val").val());
        const userId = parseInt($("#SM_UserId_Val").val());
        const currentChatMessageId = parseInt($("#SM_CurrentChatMessageId_Val").val());
        const captionText = $("#Forward_Caption_Val").val();
        const chatName = $("#ForwardingChatName_Lbl").text();
        let forwardingText = textUncoder($("#ForwardingMsgText_Lbl").html());
        forwardingText = textUncoder(forwardingText);

        hubConnection.invoke("Forward", messageId, toChatId, fromChatId, captionText, forwardingText, userId, currentChatMessageId, chatName).catch(function (err) {
            console.log(err.toString());
        });
    })

    document.getElementById("DeleteChatMessage_Form").addEventListener("submit", function (event) {
        event.preventDefault();
        const chatId = parseInt($("#SM_ChatId_Val").val());
        const userId = parseInt($("#SM_UserId_Val").val());
        const id = parseInt($("#DDM_Id_Val").val());
        const receiverId = $("#SM_ReceiverId_Val").val();
        hubConnection.invoke("DeleteMessage", id, userId, chatId, receiverId).catch(function (err) {
            console.log(err.toString());
        });
    });

    hubConnection.on("Caller_EditChat", function (name, description, shortname) {
        document.getElementById("EditChatInfo_Box-Trigger").click();
        headerReturn("Preloaded_Container_ShowBox");
        if (name != null) {
            $("#ChatName_Span").html(name);
            $("#Preloaded_Container_ShowBox-Open").html(name);
            $("#UnpicturedAvatar_Lbl").html(name[0]);
        }
        else {
            $("#ChatName_Span").html("New Chat");
            $("#Preloaded_Container_ShowBox-Open").html("New Chat");
            $("#UnpicturedAvatar_Lbl").html("N");
        }

        let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
        let chatAlertText = $("<small class='card-text text-muted'>Chat info has been edited</small>");

        chatAlertDiv.append(chatAlertText);
        $("#HaveSentMessage_Box").append(chatAlertDiv);
    });
    hubConnection.on("EditChat", function (name, description, shortname, chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (chatId == currentChatId) {
            if (name != null) {
                $("#ChatName_Span").html(name);
                $("#Preloaded_Container_ShowBox-Open").html(name);
                $("#UnpicturedAvatar_Lbl").html(name[0]);
            }
            else {
                $("#ChatName_Span").html("New Chat");
                $("#Preloaded_Container_ShowBox-Open").html("New Chat");
                $("#UnpicturedAvatar_Lbl").html("N");
            }

            let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
            let chatAlertText = $("<small class='card-text text-muted'>Chat info has been edited</small>");

            chatAlertDiv.append(chatAlertText);
            $("#HaveSentMessage_Box").append(chatAlertDiv);
        }
    });
    hubConnection.on("Caller_ClearHistory", function () {
        $("#SentMessagesCount_Val").val(0);
        setTimeout(function () {
            closeSidebar();
            animatedClose(false, "ClearHistory_Container", false, true);
            animatedClose(false, "Preloaded_Container", false, true);
        }, 200);

        setTimeout(function () {
            headerReturn("Preloaded_Container_ShowBox");
            let div = $("<div class='box-container p-3 pt-4 pb-4 bg-light mt-2 mb-2 text-center mx-auto my-auto'></div>");
            let icon = $("<h1 class='h1'> <i class='fa-regular fa-comments text-primary'></i> </h1>");
            let text = $("<h3 class='h3 style-font'>History Cleared</h3>");
            let description = $("<small class='card-text text-muted'>no sent messages as the history of this chat has been recently cleared</small>");
            $("#HaveSentMessage_Box").empty();
            $("#HaveSentMessage_Box").fadeOut(300);
            div.append(icon);
            div.append(text);
            div.append(description);

            $("#Messages_Box").append(div);
            animatedOpen(false, "Preloaded_Container", true, true);
        }, 650);
    });
    hubConnection.on("ClearHistory", function (chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            $("#SentMessagesCount_Val").val(0);
            setTimeout(function () {
                closeSidebar();
                animatedClose(false, "ClearHistory_Container", false, true);
                animatedClose(false, "Preloaded_Container", false, true);
            }, 200);

            setTimeout(function () {
                headerReturn("Preloaded_Container_ShowBox");
                let div = $("<div class='box-container p-3 pt-4 pb-4 bg-light mt-2 mb-2 text-center mx-auto my-auto'></div>");
                let icon = $("<h1 class='h1'> <i class='fa-regular fa-comments text-primary'></i> </h1>");
                let text = $("<h3 class='h3 style-font'>History Cleared</h3>");
                let description = $("<small class='card-text text-muted'>no sent messages as the history of this chat has been recently cleared</small>");
                $("#HaveSentMessage_Box").empty();
                $("#HaveSentMessage_Box").fadeOut(300);
                div.append(icon);
                div.append(text);
                div.append(description);

                $("#Messages_Box").append(div);
                animatedOpen(false, "Preloaded_Container", true, true);
            }, 650);
        }
    });
    hubConnection.on("Caller_DeleteChat", function () {
        closeSidebar();
        headerReturn("Preloaded_Container_ShowBox");
        $("#Preloaded_Container").addClass("bg-blur");
        $("#Preloaded_Container").css("pointer-events", "none");
        $("#SendMessage_Text_Val").attr("readonly", true);
        $("#SendMessage_Text_Val").attr("disabled", true);
        $("#SendAFileInMessage_Btn").attr("disabled", true);
        $("#MainTextEditor_Box-Open").attr("disabled", true);
        $("#SendMessage_Text_Val").attr("placeholder", "Chat has been deleted");
        $("#SendMessage_Text_Val").val(null);
    });
    hubConnection.on("DeleteChat", function (chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            headerReturn("Preloaded_Container_ShowBox");
            $("#Preloaded_Container").addClass("bg-blur");
            $("#Preloaded_Container").css("pointer-events", "none");
            $("#SendAFileInMessage_Btn").attr("disabled", true);
            $("#MainTextEditor_Box-Open").attr("disabled", true);
            $("#SendMessage_Text_Val").attr("readonly", true);
            $("#SendMessage_Text_Val").attr("disabled", true);
            $("#SendMessage_Text_Val").attr("placeholder", "Chat has been deleted");
            $("#SendMessage_Text_Val").val(null);
        }
    });

    hubConnection.on("Typing", function () {

        document.getElementById("StatusBar_Lbl-0").innerHTML = ' <i class="fa-regular fa-keyboard text-primary"></i> typing...';
    });
    hubConnection.on("Idling", function () {
        document.getElementById("StatusBar_Lbl-0").innerHTML = "online";
    });
    hubConnection.on("ClosedTheChat", function (dateAndTime) {
        document.getElementById("StatusBar_Lbl-0").innerHTML = "last seen " + dateAndTimeTranslator(dateAndTime);
    });
    hubConnection.on("OpenedTheChat", function () {
        document.getElementById("StatusBar_Lbl-0").innerHTML = "online";
    });

    hubConnection.on("CallerReceive", function (message, id, chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            let messageMainBox = document.createElement("div");
            let messageNotMainBox = document.createElement("div");
            let isAutodeletableSmall = document.createElement("small");
            let mainText = document.createElement("p");
            let styleBox = document.createElement("div");
            let statsBox = document.createElement("div");
            let isChecked = document.createElement("small");
            let dateAndTimeFullValue = document.createElement("input");
            let dateAndTime = document.createElement("small");
            let isEdited = document.createElement("small");

            messageMainBox.classList.add("message-box");
            messageNotMainBox.classList.add("cur-user-msg-box");
            styleBox.classList.add("cur-user-styled-msg-box");
            styleBox.classList.add("p-2");
            isAutodeletableSmall.classList.add("card-text");
            mainText.classList.add("card-text");
            mainText.classList.add("white-space-on");
            mainText.classList.add("message-label");
            mainText.classList.add("chat-options");
            statsBox.classList.add("float-end");
            statsBox.classList.add("me-1");
            isChecked.classList.add("card-text");
            isChecked.classList.add("msg-checked-icon");
            dateAndTime.classList.add("card-text");
            dateAndTime.classList.add("text-muted");
            isEdited.classList.add("card-text");
            isEdited.classList.add("text-muted");
            isEdited.style.display = "none";
            dateAndTimeFullValue.classList.add("d-none");

            // let imgsLinkBtn = $("<button type='button' class='btn btn-link btn-sm'></button>");
            // let imgBox = $("<div class='box-container mt-1 mb-1'></div>");
            // let imgTag = $("<img class='msg-img-container' alt='Cannot display this image' />");

            let currentDate = new Date();
            let day = currentDate.getDate() < 10 ? "0" + currentDate.getDate() : currentDate.getDate();
            let month = parseInt(currentDate.getMonth()) + 1;
            month = month < 10 ? "0" + month : month;
            let hrs = currentDate.getHours() < 10 ? "0" + currentDate.getHours() : currentDate.getHours();
            let mins = currentDate.getMinutes() < 10 ? "0" + currentDate.getMinutes() : currentDate.getMinutes();

            dateAndTimeFullValue.value = day + "." + month + ", " + hrs + ":" + mins;
            let newMessage = textDecoder(message, null);
            mainText.innerHTML = newMessage;
            dateAndTime.innerHTML = dateAndTimeTranslator(currentDate);
            isChecked.innerHTML = ' <i class="fa-solid fa-check text-muted"></i> ';

            styleBox.appendChild(isAutodeletableSmall);
            styleBox.appendChild(mainText);
            statsBox.appendChild(isChecked);
            statsBox.appendChild(dateAndTimeFullValue);
            statsBox.appendChild(dateAndTime);
            statsBox.appendChild(isEdited);
            messageNotMainBox.appendChild(styleBox);
            messageNotMainBox.appendChild(statsBox);
            messageMainBox.appendChild(messageNotMainBox);

            messageMainBox.setAttribute("id", id + "-ChatMsgBox");
            messageNotMainBox.setAttribute("id", id + "-ChatMsgNmBox");
            isEdited.setAttribute("id", id + "-ChatMsgIsEdited_Lbl");
            isChecked.setAttribute("id", id + "-ChatMsgIsChecked_Lbl");
            dateAndTimeFullValue.setAttribute("id", id + "-ChatMsgFullDate_Val");
            dateAndTime.setAttribute("id", id + "-ChatMsgDateAndTime_Lbl");
            mainText.setAttribute("id", id + "-ChatOptionMsgText_Lbl");

            document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
            setTimeout(function () {
                $("#SendMessage_SbmtBtn").attr("disabled", false);
            }, 1500);

            let sentMessagesCount = parseInt(document.getElementById("SentMessagesCount_Val").value);
            if (sentMessagesCount <= 0) {
                slideToLeft("NoSentMessages_Box");
                $("#NoSentMessages_Box").fadeOut(300);
                document.getElementById("HaveSentMessage_Box").style.display = "block";
            }
            sentMessagesCount++;
            document.getElementById("SentMessagesCount_Val").value = sentMessagesCount;
            insideBoxClose(true, null);
        }
    });

    hubConnection.on("Receive", function (message, id, chatId, chatName, senderId, isMuted) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (chatId == currentChatId) {
            let messageMainBox = document.createElement("div");
            let messageNotMainBox = document.createElement("div");
            let isAutodeletableSmall = document.createElement("small");
            let mainText = document.createElement("p");
            let styleBox = document.createElement("div");
            let statsBox = document.createElement("div");
            let dateAndTimeFullValue = document.createElement("input");
            let dateAndTime = document.createElement("small");
            let isEdited = document.createElement("small");

            messageMainBox.classList.add("message-box");
            messageNotMainBox.classList.add("other-user-msg-box");
            styleBox.classList.add("other-user-styled-msg-box");
            styleBox.classList.add("p-2");
            isAutodeletableSmall.classList.add("card-text");
            mainText.classList.add("card-text");
            mainText.classList.add("white-space-on");
            mainText.classList.add("message-label");
            mainText.classList.add("reply-to-chat-message");
            mainText.classList.add("chat-options");
            statsBox.classList.add("ms-1");
            dateAndTime.classList.add("card-text");
            dateAndTime.classList.add("text-muted");
            isEdited.classList.add("card-text");
            isEdited.classList.add("text-muted");
            isEdited.style.display = "none";
            dateAndTimeFullValue.classList.add("d-none");

            // let imgsLinkBtn = $("<button type='button' class='btn btn-link btn-sm'></button>");
            // let imgBox = $("<div class='box-container mt-1 mb-1'></div>");
            // let imgTag = $("<img class='msg-img-container' alt='Cannot display this image' />");

            messageMainBox.setAttribute("id", id + "-ChatMsgBox");
            messageNotMainBox.setAttribute("id", id + "-ChatMsgNmBox");
            isEdited.setAttribute("id", id + "-ChatMsgIsEdited_Lbl");
            dateAndTimeFullValue.setAttribute("id", id + "-ChatMsgFullDate_Val");
            dateAndTimeFullValue.setAttribute("type", "hidden");
            dateAndTime.setAttribute("id", id + "-ChatMsgDateAndTime_Lbl");
            mainText.setAttribute("id", id + "-ChatOptionMsgText_Lbl");

            let currentDate = new Date();
            let day = currentDate.getDate() < 10 ? "0" + currentDate.getDate() : currentDate.getDate();
            let month = parseInt(currentDate.getMonth()) + 1;
            month = month < 10 ? "0" + month : month;
            let hrs = currentDate.getHours() < 10 ? "0" + currentDate.getHours() : currentDate.getHours();
            let mins = currentDate.getMinutes() < 10 ? "0" + currentDate.getMinutes() : currentDate.getMinutes();

            dateAndTimeFullValue.value = day + "." + month + ", " + hrs + ":" + mins;
            let newMessage = textDecoder(message, null);
            mainText.innerHTML = newMessage;
            dateAndTime.innerHTML = dateAndTimeTranslator(currentDate);

            styleBox.appendChild(isAutodeletableSmall);
            styleBox.appendChild(mainText);
            statsBox.appendChild(dateAndTime);
            statsBox.appendChild(dateAndTimeFullValue);
            statsBox.appendChild(isEdited);
            messageNotMainBox.appendChild(styleBox);
            messageNotMainBox.appendChild(statsBox);
            messageMainBox.appendChild(messageNotMainBox);

            document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
            let sentMessagesCount = parseInt(document.getElementById("SentMessagesCount_Val").value);
            if (sentMessagesCount <= 0) {
                slideToLeft("NoSentMessages_Box");
                slideToRight("HaveSentMessages_Box");
                $("#HaveSentMessages_Box").fadeIn(250);
                $("#NoSentMessages_Box").fadeOut(250);
            }
            sentMessagesCount++;
            document.getElementById("SentMessagesCount_Val").value = sentMessagesCount;
        }
        else {
            if(!isMuted) {
                $("#ReplyingMsg_ChatId_Val").val(chatId);
                $("#ReplyingMsg_ReceiverId_Val").val(senderId);
                $("#MessageFrom_Lbl").html(chatName);
                $("#MessageText_Lbl").html(message);

               topBarOpen("MessageAlert_Container");
               messageAlertTimeout = setTimeout(function () {
                    topBarClose("MessageAlert_Container");
                }, 6000);
            }
        }
    });

    hubConnection.on("Caller_ReplyReceive", function (id, text, replyText, messageId) {
        let messageMainBox = document.createElement("div");
        let messageNotMainBox = document.createElement("div");
        let isAutodeletableSmall = document.createElement("small");
        let mainText = document.createElement("p");
        let styleBox = document.createElement("div");
        let replyBox = document.createElement("div");
        let repliedTo = document.createElement("small");
        let repliedText = document.createElement("p");
        let dateAndTimeFullValue = document.createElement("input");
        let statsBox = document.createElement("div");
        let isChecked = document.createElement("small");
        let dateAndTime = document.createElement("small");
        let isEdited = document.createElement("small");

        replyBox.classList.add("cur-user-reply-container");
        replyBox.classList.add("mb-1");
        replyBox.classList.add("reply-element");
        repliedTo.classList.add("card-text");
        repliedTo.classList.add("fw-500");
        repliedTo.classList.add("reply-element");
        repliedText.classList.add("card-text");
        repliedText.classList.add("white-space-on");
        repliedText.classList.add("message-label");
        repliedText.classList.add("reply-element");

        messageMainBox.classList.add("message-box");
        messageNotMainBox.classList.add("cur-user-msg-box");
        styleBox.classList.add("cur-user-styled-msg-box");
        styleBox.classList.add("p-2");
        isAutodeletableSmall.classList.add("card-text");
        mainText.classList.add("card-text");
        mainText.classList.add("white-space-on");
        mainText.classList.add("message-label");
        mainText.classList.add("chat-options");
        statsBox.classList.add("float-end");
        statsBox.classList.add("me-1");
        isChecked.classList.add("card-text");
        isChecked.classList.add("msg-checked-icon");
        dateAndTime.classList.add("card-text");
        dateAndTime.classList.add("text-muted");
        isEdited.classList.add("card-text");
        isEdited.classList.add("text-muted");
        isEdited.style.display = "none";
        dateAndTimeFullValue.classList.add("d-none");

        let currentDate = new Date();
        let day = currentDate.getDate() < 10 ? "0" + currentDate.getDate() : currentDate.getDate();
        let month = parseInt(currentDate.getMonth()) + 1;
        month = month < 10 ? "0" + month : month;
        let hrs = currentDate.getHours() < 10 ? "0" + currentDate.getHours() : currentDate.getHours();
        let mins = currentDate.getMinutes() < 10 ? "0" + currentDate.getMinutes() : currentDate.getMinutes();

        dateAndTimeFullValue.value = day + "." + month + ", " + hrs + ":" + mins;
        console.log(dateAndTimeFullValue.value);
        let newMessage = textDecoder(text, null);
        let newRepliedText = textDecoder(replyText, null);
        repliedTo.innerHTML = " <i class='fa-solid fa-reply'></i> Replied to";
        mainText.innerHTML = newMessage;
        repliedText.innerHTML = newRepliedText;
        dateAndTime.innerHTML = dateAndTimeTranslator(currentDate);
        isChecked.innerHTML = ' <i class="fa-solid fa-check text-muted"></i> ';

        replyBox.appendChild(repliedTo);
        replyBox.appendChild(repliedText);
        styleBox.appendChild(isAutodeletableSmall);
        styleBox.appendChild(replyBox);
        styleBox.appendChild(mainText);
        statsBox.appendChild(isChecked);
        statsBox.appendChild(dateAndTimeFullValue);
        statsBox.appendChild(dateAndTime);
        statsBox.appendChild(isEdited);
        messageNotMainBox.appendChild(styleBox);
        messageNotMainBox.appendChild(statsBox);
        messageMainBox.appendChild(messageNotMainBox);

        replyBox.setAttribute("id", messageId + "-RepliedMsgBox");
        repliedText.setAttribute("id", messageId + "-RepliedMsgText");
        messageMainBox.setAttribute("id", id + "-ChatMsgBox");
        messageNotMainBox.setAttribute("id", id + "-ChatMsgNmBox");
        isEdited.setAttribute("id", id + "-ChatMsgIsEdited_Lbl");
        isChecked.setAttribute("id", id + "-ChatMsgIsChecked_Lbl");
        dateAndTimeFullValue.setAttribute("id", id + "-ChatMsgFullDate_Val");
        dateAndTime.setAttribute("id", id + "-ChatMsgDateAndTime_Lbl");
        mainText.setAttribute("id", id + "-ChatOptionMsgText_Lbl");

        document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
        setTimeout(function () {
            $("#SendMessage_SbmtBtn").attr("disabled", false);
        }, 1500);

        let sentMessagesCount = parseInt($("#SentMessagesCount_Val").val());
        if (sentMessagesCount > 0) {
            document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
        }
        else {
            slideToLeft("NoSentMessages_Box");
            document.getElementById("HaveSentMessage_Box").style.display = "block";
            document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
        }
        sentMessagesCount++;
        $("#SentMessagesCount_Val").val(sentMessagesCount);

        $("#EditingOrReplying_Box").slideUp(250);
        $("#EM_Id_Val").val(0);
        $("#RM_ReplyId_Val").val(0);
        $("#RM_ReplyText_Val").val("");
    });

    hubConnection.on("ReplyReceive", function (id, text, replyText, messageId, chatId, senderId, chatName, isMuted) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            let messageMainBox = document.createElement("div");
            let messageNotMainBox = document.createElement("div");
            let isAutodeletableSmall = document.createElement("small");
            let mainText = document.createElement("p");
            let styleBox = document.createElement("div");
            let replyBox = document.createElement("div");
            let repliedTo = document.createElement("small");
            let repliedText = document.createElement("p");
            let statsBox = document.createElement("div");
            let dateAndTimeFullValue = document.createElement("input");
            let dateAndTime = document.createElement("small");
            let isEdited = document.createElement("small");

            replyBox.classList.add("other-user-reply-container");
            replyBox.classList.add("mb-1");
            replyBox.classList.add("reply-element");
            repliedTo.classList.add("card-text");
            repliedTo.classList.add("fw-500");
            repliedTo.classList.add("reply-element");
            repliedTo.classList.add("reply-to-chat-message");
            repliedText.classList.add("card-text");
            repliedText.classList.add("white-space-on");
            repliedText.classList.add("message-label");
            repliedText.classList.add("reply-element");

            messageMainBox.classList.add("message-box");
            messageNotMainBox.classList.add("other-user-msg-box");
            styleBox.classList.add("other-user-styled-msg-box");
            styleBox.classList.add("p-2");
            isAutodeletableSmall.classList.add("card-text");
            mainText.classList.add("card-text");
            mainText.classList.add("white-space-on");
            mainText.classList.add("message-label");
            mainText.classList.add("chat-options");
            statsBox.classList.add("float-end");
            statsBox.classList.add("me-1");
            dateAndTime.classList.add("card-text");
            dateAndTime.classList.add("text-muted");
            isEdited.classList.add("card-text");
            isEdited.classList.add("text-muted");
            isEdited.style.display = "none";
            dateAndTimeFullValue.classList.add("d-none");

            let currentDate = new Date();
            let day = currentDate.getDate() < 10 ? "0" + currentDate.getDate() : currentDate.getDate();
            let month = parseInt(currentDate.getMonth()) + 1;
            month = month < 10 ? "0" + month : month;
            let hrs = currentDate.getHours() < 10 ? "0" + currentDate.getHours() : currentDate.getHours();
            let mins = currentDate.getMinutes() < 10 ? "0" + currentDate.getMinutes() : currentDate.getMinutes();

            dateAndTimeFullValue.value = day + "." + month + ", " + hrs + ":" + mins;
            let newMessage = textDecoder(text, null);
            let newRepliedText = textDecoder(replyText, null);
            repliedTo.innerHTML = " <i class='fa-solid fa-reply'></i> Replied to";
            mainText.innerHTML = newMessage;
            repliedText.innerHTML = newRepliedText;
            dateAndTime.innerHTML = dateAndTimeTranslator(currentDate);

            replyBox.appendChild(repliedTo);
            replyBox.appendChild(repliedText);
            styleBox.appendChild(isAutodeletableSmall);
            styleBox.appendChild(replyBox);
            styleBox.appendChild(mainText);
            statsBox.appendChild(dateAndTime);
            statsBox.appendChild(dateAndTimeFullValue);
            statsBox.appendChild(isEdited);
            messageNotMainBox.appendChild(styleBox);
            messageNotMainBox.appendChild(statsBox);
            messageMainBox.appendChild(messageNotMainBox);

            replyBox.setAttribute("id", messageId + "-RepliedMsgBox");
            repliedText.setAttribute("id", messageId + "-RepliedMsgText");
            messageMainBox.setAttribute("id", id + "-ChatMsgBox");
            messageNotMainBox.setAttribute("id", id + "-ChatMsgNmBox");
            isEdited.setAttribute("id", id + "-ChatMsgIsEdited_Lbl");
            dateAndTimeFullValue.setAttribute("id", id + "-ChatMsgFullDate_Val");
            dateAndTimeFullValue.setAttribute("type", "hidden");
            dateAndTime.setAttribute("id", id + "-ChatMsgDateAndTime_Lbl");
            mainText.setAttribute("id", id + "-ChatOptionMsgText_Lbl");

            document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
            setTimeout(function () {
                $("#SendMessage_SbmtBtn").attr("disabled", false);
            }, 1500);

            let sentMessagesCount = parseInt($("#SentMessagesCount_Val").val());
            if (sentMessagesCount > 0) {
                document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
            }
            else {
                slideToLeft("NoSentMessages_Box");
                document.getElementById("HaveSentMessage_Box").style.display = "block";
                document.getElementById("HaveSentMessage_Box").appendChild(messageMainBox);
            }
            sentMessagesCount++;
            $("#SentMessagesCount_Val").val(sentMessagesCount);
        }
        else {
            if (!isMuted) {
                $("#ReplyingMsg_ChatId_Val").val(chatId);
                $("#ReplyingMsg_ReceiverId_Val").val(senderId);
                $("#MessageFrom_Lbl").html(chatName);
                $("#MessageText_Lbl").html(text == "" ? "Replied Message" : text);

                topBarOpen("MessageAlert_Container");
                messageAlertTimeout = setTimeout(function () {
                    topBarClose("MessageAlert_Container");
                }, 6000);
            }
        }
    });

    hubConnection.on("Forward_Success", function () {
        animatedClose(false, "Chats_Container", true, true);
        alert('<i class="fa-regular fa-circle-check fa-spin text-primary" style="--fa-animation-duration: 1.2s; --fa-animation-iteration-count: 3;"></i>', "Selected message has been successfully forwarded", "Close", null, 0, null, null, null, 3.5);
        setTimeout(function () {
            $(".forward-chat-msg").removeClass("border-primary");
            $(".forward-chat-msg").html(' <i class="fa-solid fa-share text-primary"></i> Choose');
            $("#Forward_Caption_Val").val(null);
            $("#ForwardingChatName_Lbl").html("unknown chat");
            $("#Forward_ToChatId_Val").val(0);
            $("#Forward_MessageId_Val").val(0);
            $("#MessageForwarding_Box").fadeOut(300);
        }, 500);
    });

    hubConnection.on("ForwardDeny", function () {
        alert('<i class="fa-regular fa-circle-xmark fa-shake"></i>', "Forwarding denied due to chat security settings (selected chat has turned off the ability to get any forwarded messages)", "Close", null, 0, null, null, null, 4);
    });

    hubConnection.on("EditReceive", function (message, id) {
        textDecoder(message, id + "-ChatOptionMsgText_Lbl");
        textDecoder(message, id + "-RepliedMsgText");
        $("#" + id + "-ChatMsgIsEdited_Lbl").text(" edited");
        $("#" + id + "-ChatMsgIsEdited_Lbl").fadeIn(250);
    });

    hubConnection.on("Edit_CallerReceive", function (message, id) {
        textDecoder(message, id + "-ChatOptionMsgText_Lbl");
        textDecoder(message, id + "-RepliedMsgText");
        $("#" + id + "-ChatMsgIsEdited_Lbl").text(" edited");
        $("#" + id + "-ChatMsgIsEdited_Lbl").fadeIn(250);
        $("#EditingOrReplying_Box").slideUp(250);
        $("#EM_Id_Val").val(0);
        $("#RM_ReplyId_Val").val(0);
        $("#RM_ReplyText_Val").val("");
    });

    hubConnection.on("Caller_DeleteMessage", function (id) {
        let sentMessagesCount = parseInt($("#SentMessagesCount_Val").val());
        sentMessagesCount--;
        slideToLeft(id + "-ChatMsgBox");
        if (sentMessagesCount <= 0) {
            slideToLeft("HaveSentMessage_Box");
            setTimeout(function () {
                slideToRight("NoSentMessages_Box");
            }, 700);
        }
        $("#SentMessagesCount_Val").val(sentMessagesCount);
        insideBoxClose(true, null);
    });

    hubConnection.on("DeleteMessage", function (id, chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if(currentChatId == chatId) {
            let sentMessagesCount = parseInt($("#SentMessagesCount_Val").val());
            sentMessagesCount--;
            slideToLeft(id + "-ChatMsgBox");
            if (sentMessagesCount <= 0) {
                slideToLeft("HaveSentMessage_Box");
                setTimeout(function () {
                    slideToRight("NoSentMessages_Box");
                }, 700);
            }
            $("#SentMessagesCount_Val").val(sentMessagesCount);
        }
    });

    hubConnection.on("Caller_PinTheMessage", function (id) {
        let text = $("#" + id + "-ChatOptionMsgText_Lbl").text();
        let pinnedMessagesCount = parseInt($("#PinnedMessagesCount_Span").text());
        pinnedMessagesCount++;
        textDecoder($("#" + id + "-ChatOptionMsgText_Lbl").html(), "CurrentPinnedMessagesText_Lbl");
        if (pinnedMessagesCount == 1) {
            $("#PinnedMessages_Box").slideDown(250);
        }
        $("#PinnedMessagesCurrentNumber_Span").text("1");
        $("#PinnedMessagesCount_Span").text(pinnedMessagesCount);
        let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
        let chatAlertText = $("<small class='card-text text-muted'></small>");
        chatAlertText.html(text.length > 50 ? text.substring(0, 50) + "..." : text + " message has been pinned");
        chatAlertDiv.append(chatAlertText);
        $("#HaveSentMessage_Box").append(chatAlertDiv);

        insideBoxClose(true, null);
    });

    hubConnection.on("PinTheMessage", function (id, chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            let text = $("#" + id + "-ChatOptionMsgText_Lbl").text();
            let pinnedMessagesCount = parseInt($("#PinnedMessagesCount_Span").text());
            pinnedMessagesCount++;
            textDecoder($("#" + id + "-ChatOptionMsgText_Lbl").html(), "CurrentPinnedMessagesText_Lbl");
            if (pinnedMessagesCount == 1) {
                $("#PinnedMessages_Box").slideDown(250);
            }
            $("#PinnedMessagesCurrentNumber_Span").text("1");
            $("#PinnedMessagesCount_Span").text(pinnedMessagesCount);
            let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
            let chatAlertText = $("<small class='card-text text-muted'></small>");
            chatAlertText.html(text.length > 50 ? text.substring(0, 50) + "..." : text + " message has been pinned");
            chatAlertDiv.append(chatAlertText);
            $("#HaveSentMessage_Box").append(chatAlertDiv);
        }
    });

    hubConnection.on("Caller_UnpinTheMessage", function (id, prevMessage) {
        console.log(id, prevMessage);
        let oldText = $("#" + prevMessage + "-ChatOptionMsgText_Lbl").text();
        let newText = $("#" + id + "-ChatOptionMsgText_Lbl").text();
        let pinnedMessagesCount = parseInt($("#PinnedMessagesCount_Span").text());
        pinnedMessagesCount--;

        if (id > 0) {
            textDecoder($("#" + id + "-ChatOptionMsgText_Lbl").html(), "CurrentPinnedMessagesText_Lbl");
        }
        if (pinnedMessagesCount <= 0) {
            $("#PinnedMessages_Box").slideUp(250); 
            setTimeout(function () {
                $("#CurrentPinnedMessagesText_Lbl").empty();
            }, 400);
        }
        $("#PinnedMessagesCurrentNumber_Span").text("1");
        $("#PinnedMessagesCount_Span").text(pinnedMessagesCount);

        let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
        let chatAlertText = $("<small class='card-text text-muted'></small>");
        chatAlertText.html(oldText.length > 50 ? oldText.substring(0, 50) + "..." : oldText + " message has been unpinned");
        chatAlertDiv.append(chatAlertText);
        $("#HaveSentMessage_Box").append(chatAlertDiv);

        insideBoxClose(true, null);
    });

    hubConnection.on("UnpinTheMessage", function (id, prevId, chatId) {
        let currentChatId = $("#CurrentChatId_Val").val();
        if (currentChatId == chatId) {
            let oldText = $("#" + prevId + "-ChatOptionMsgText_Lbl").text();
            let newText = $("#" + id + "-ChatOptionMsgText_Lbl").text();
            let pinnedMessagesCount = parseInt($("#PinnedMessagesCount_Span").text());
            pinnedMessagesCount--;

            if (id > 0) {
                textDecoder($("#" + id + "-ChatOptionMsgText_Lbl").html(), "CurrentPinnedMessagesText_Lbl");
            }
            if (pinnedMessagesCount <= 0) {
                $("#PinnedMessages_Box").slideUp(250);
                setTimeout(function () {
                    $("#CurrentPinnedMessagesText_Lbl").empty();
                }, 400);
            }
            $("#PinnedMessagesCurrentNumber_Span").text("1");
            $("#PinnedMessagesCount_Span").text(pinnedMessagesCount);

            let chatAlertDiv = $("<div class='grouping-box mx-auto text-center'></div>");
            let chatAlertText = $("<small class='card-text text-muted'></small>");
            chatAlertText.html(oldText.length > 50 ? oldText.substring(0, 50) + "..." : oldText + " message has been unpinned");
            chatAlertDiv.append(chatAlertText);
            $("#HaveSentMessage_Box").append(chatAlertDiv);
        }
    });

        hubConnection.onclose(async function () {
            await start();
        });

        start();
</script>
